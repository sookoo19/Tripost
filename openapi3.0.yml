openapi: '3.0.3'
info:
  title: Tripost API
  version: '1.0'
  description: Travel SNS API for sharing trip experiences
servers:
  - url: https://api.tripost.com/v1
    description: Production server
  - url: http://localhost:8000/api/v1
    description: Development server

paths:
  /sanctum/csrf-cookie:
    get:
      summary: Get CSRF cookie
      tags:
        - Authentication
      description: Initialize CSRF protection for SPA
      responses:
        '204':
          description: CSRF cookie set successfully

  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - displayid
                - email
                - password
                - password_confirmation
              properties:
                name:
                  type: string
                  maxLength: 255
                displayid:
                  type: string
                  maxLength: 50
                  minLength: 8
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                password_confirmation:
                  type: string
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: Login user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      summary: Logout user
      tags:
        - Authentication
      security:
        - cookieAuth: []
        - csrfToken: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /auth/user:
    get:
      summary: Get authenticated user
      tags:
        - Authentication
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Authenticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      summary: Get list of users
      tags:
        - Users
      parameters:
        - name: search
          in: query
          schema:
            type: string
          description: Search by username
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      summary: Get user by ID
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    put:
      summary: Update user profile
      tags:
        - Users
      security:
        - cookieAuth: []
        - csrfToken: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated
        '403':
          description: Permission denied

  /users/{userId}/follow:
    post:
      summary: Follow a user
      tags:
        - Users
      security:
        - cookieAuth: []
        - csrfToken: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Successfully followed user
        '400':
          description: Cannot follow yourself

    delete:
      summary: Unfollow a user
      tags:
        - Users
      security:
        - cookieAuth: []
        - csrfToken: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successfully unfollowed user

  /posts:
    get:
      summary: Get list of posts
      tags:
        - Posts
      parameters:
        - name: country
          in: query
          schema:
            type: string
        - name: travel_style
          in: query
          schema:
            type: string
            enum: [solo, couple, family, friends, business]
        - name: genre
          in: query
          schema:
            type: string
            enum: [nature, culture, food, adventure, relaxation]
        - name: budget_min
          in: query
          schema:
            type: number
        - name: budget_max
          in: query
          schema:
            type: number
        - name: sort
          in: query
          schema:
            type: string
            enum: [latest, popular, liked]
            default: latest
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      summary: Create a new post
      tags:
        - Posts
      security:
        - cookieAuth: []
        - csrfToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'

  /posts/{postId}:
    get:
      summary: Get post by ID
      tags:
        - Posts
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetail'
        '404':
          description: Post not found

    put:
      summary: Update a post
      tags:
        - Posts
      security:
        - cookieAuth: []
        - csrfToken: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdate'
      responses:
        '200':
          description: Post updated
        '403':
          description: Permission denied

    delete:
      summary: Delete a post
      tags:
        - Posts
      security:
        - cookieAuth: []
        - csrfToken: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Post deleted
        '403':
          description: Permission denied

  /posts/{postId}/like:
    post:
      summary: Like a post
      tags:
        - Posts
      security:
        - cookieAuth: []
        - csrfToken: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Post liked
        '400':
          description: Already liked

    delete:
      summary: Unlike a post
      tags:
        - Posts
      security:
        - cookieAuth: []
        - csrfToken: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Post unliked

  /posts/{postId}/save:
    post:
      summary: Save a post
      tags:
        - Posts
      security:
        - cookieAuth: []
        - csrfToken: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Post saved
        '400':
          description: Already saved

    delete:
      summary: Unsave a post
      tags:
        - Posts
      security:
        - cookieAuth: []
        - csrfToken: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Post unsaved

  /posts/{postId}/comments:
    get:
      summary: Get comments for a post
      tags:
        - Comments
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'

    post:
      summary: Add a comment
      tags:
        - Comments
      security:
        - cookieAuth: []
        - csrfToken: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  maxLength: 500
      responses:
        '201':
          description: Comment added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: "laravel_session"
      description: "Laravel Sanctum session-based authentication for SPA"
    
    csrfToken:
      type: apiKey
      in: header
      name: "X-CSRF-TOKEN"
      description: "CSRF token for session-based authentication"

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        displayid:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        avatar:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        followers_count:
          type: integer
        following_count:
          type: integer
        posts_count:
          type: integer
        total_likes:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserUpdate:
      type: object
      properties:
        displayid:
          type: string
        username:
          type: string
        bio:
          type: string
        avatar:
          type: string

    Post:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        title:
          type: string
        description:
          type: string
        country:
          type: string
        region:
          type: string
        travel_date:
          type: string
          format: date
        budget:
          type: number
        travel_style:
          type: string
          enum: [solo, couple, family, friends, business]
        genre:
          type: string
          enum: [nature, culture, food, adventure, relaxation]
        is_public:
          type: boolean
        likes_count:
          type: integer
        saves_count:
          type: integer
        comments_count:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'

    PostDetail:
      allOf:
        - $ref: '#/components/schemas/Post'
        - type: object
          properties:
            locations:
              type: array
              items:
                $ref: '#/components/schemas/Location'
            images:
              type: array
              items:
                $ref: '#/components/schemas/Image'
            is_liked:
              type: boolean
            is_saved:
              type: boolean

    PostCreate:
      type: object
      required:
        - title
        - country
        - travel_date
      properties:
        title:
          type: string
          maxLength: 255
        description:
          type: string
        country:
          type: string
        region:
          type: string
        travel_date:
          type: string
          format: date
        budget:
          type: number
        travel_style:
          type: string
          enum: [solo, couple, family, friends, business]
        genre:
          type: string
          enum: [nature, culture, food, adventure, relaxation]
        is_public:
          type: boolean
          default: true
        locations:
          type: array
          items:
            $ref: '#/components/schemas/LocationCreate'

    PostUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        country:
          type: string
        region:
          type: string
        travel_date:
          type: string
          format: date
        budget:
          type: number
        travel_style:
          type: string
        genre:
          type: string
        is_public:
          type: boolean

    Location:
      type: object
      properties:
        id:
          type: integer
        post_id:
          type: integer
        name:
          type: string
        description:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        address:
          type: string
        google_place_id:
          type: string
        order_index:
          type: integer
        created_at:
          type: string
          format: date-time

    LocationCreate:
      type: object
      required:
        - name
        - latitude
        - longitude
      properties:
        name:
          type: string
        description:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        address:
          type: string
        google_place_id:
          type: string
        order_index:
          type: integer

    Image:
      type: object
      properties:
        id:
          type: integer
        post_id:
          type: integer
        location_id:
          type: integer
          nullable: true
        image_url:
          type: string
        caption:
          type: string
        order_index:
          type: integer
        created_at:
          type: string
          format: date-time

    Comment:
      type: object
      properties:
        id:
          type: integer
        post_id:
          type: integer
        user_id:
          type: integer
        content:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
        last_page:
          type: integer
        per_page:
          type: integer
        total:
          type: integer
        has_more:
          type: boolean

    Error:
      type: object
      properties:
        message:
          type: string
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string